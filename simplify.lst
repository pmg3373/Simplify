   1 0000               # FILE:         $File$
   2 0000               # AUTHOR:       P. White
   3 0000               # CONTRIBUTORS: M. Reek, W. Carithers
   4 0000               # 		<<<Patrick Godard>>>
   5 0000               #
   6 0000               # DESCRIPTION:
   7 0000               #	In this experiment, you will write some code in a pair of 
   8 0000               #	functions that are used to simplify a fraction.
   9 0000               #
  10 0000               # ARGUMENTS:
  11 0000               #       None
  12 0000               #
  13 0000               # INPUT:
  14 0000               #	The numerator and denominator of a fraction
  15 0000               #
  16 0000               # OUTPUT:
  17 0000               #	The fraction in simplified form (ie 210/50 would be simplified
  18 0000               #	to "4 and 1/5")
  19 0000               #
  20 0000               # REVISION HISTORY:
  21 0000               #       Dec  13, 04         - P. White, created program
  22 0000               #
  23 0000               
  24 0000               #
  25 0000               # CONSTANT DECLARATIONS
  26 0000               #
  27 0000               PRINT_INT	= 1		# code for syscall to print integer
  28 0000               PRINT_STRING	= 4		# code for syscall to print a string
  29 0000               READ_INT	= 5		# code for syscall to read an int
  30 0000               
  31 0000               #
  32 0000               # DATA DECLARATIONS
  33 0000               #
  34 0000               	.data
  35 0000               into_msg:
  36 0000 0A2A2A2A		.ascii  "\n*************************\n"
          2A2A2A2A
          2A2A2A2A
          2A2A2A2A
          2A2A2A2A
          2A2A2A2A
  37 001b 2A2A2046		.ascii	  "** Fraction Simplifier **\n"
          72616374
          696F6E20
          53696D70
          6C696669
          6572202A
  38 0035 2A2A2A2A		.asciiz   "*************************\n\n"
          2A2A2A2A
          2A2A2A2A
          2A2A2A2A
          2A2A2A2A
          2A2A2A2A
  39 0051               newline:
  40 0051 0A00    		.asciiz "\n"
  41 0053               input_error:
  42 0053 0A457272		.asciiz "\nError with previous input, try again.\n"
          6F722077
          69746820
          70726576
          696F7573
          20696E70
  43 007b               num_string:
  44 007b 0A456E74		.asciiz "\nEnter the Numerator of the fraction: "
          65722074
          6865204E
          756D6572
          61746F72
          206F6620
  45 00a2               den_string:
  46 00a2 0A456E74		.asciiz "\nEnter the Denominator of the fraction: "
          65722074
          68652044
          656E6F6D
          696E6174
          6F72206F
  47 00cb               res_string:
  48 00cb 0A546865		.asciiz "\nThe simplified fraction is: "
          2073696D
          706C6966
          69656420
          66726163
          74696F6E
  49 00e9               and_string:
  50 00e9 20616E64		.asciiz " and "
          2000    
  51 00ef               div_string:
  52 00ef 2F00    		.asciiz "/"
  53 00f1               #
  54 00f1               # MAIN PROGRAM
  55 00f1               #
  56 0000               	.text
  57 0000               	.align	2
  58 0000               	.globl	main
  59 0000               main:
  60 0000 23BDFFF0	        addi    $sp, $sp, -16  	# space for return address/doubleword aligned
  61 0004 AFBF000C	        sw      $ra, 12($sp)    # store the ra on the stack
  62 0008 AFB20008	        sw      $s2, 8($sp)
  63 000c AFB10004	        sw      $s1, 4($sp)
  64 0010 AFB00000	        sw      $s0, 0($sp)
  65 0014               
  66 0014 3C040000		la	$a0, into_msg
     0018 34840000
  67 001c 0C000095	        jal	print_string
  68 0020               
  69 0020               ask_for_num:
  70 0020 3C040000		la	$a0, num_string
     0024 34840000
  71 0028 0C000095	        jal	print_string
  72 002c               
  73 002c 34020005		la	$v0, READ_INT
  74 0030 0000000C		syscall
  75 0034 00408021		move	$s0, $v0	# s0 will be the numerator
  76 0038               
  77 0038 28480000		slti    $t0, $v0, 0
  78 003c 11000004		beq	$t0, $zero, ask_for_den
  79 0040               
  80 0040 3C040000	        la      $a0, input_error
     0044 34840000
  81 0048 0C000095		jal     print_string
  82 004c               
  83 004c 08000008		j	ask_for_num
  84 0050               
  85 0050               ask_for_den:
  86 0050 3C040000		la	$a0, den_string
     0054 34840000
  87 0058 0C000095		jal	print_string
  88 005c               
  89 005c 34020005		la	$v0, READ_INT
  90 0060 0000000C		syscall
  91 0064 00402821		move	$a1, $v0	# a1 will be the denominator
  92 0068               
  93 0068 28480001		slti	$t0, $v0, 1
  94 006c 11000004		beq	$t0, $zero, den_good
  95 0070               
  96 0070 3C040000	        la      $a0, input_error
     0074 34840000
  97 0078 0C000095		jal	print_string
  98 007c               
  99 007c 08000014		j	ask_for_den
 100 0080               
 101 0080               den_good:
 102 0080 02002021		move	$a0, $s0	# copy the numerator into a0
 103 0084 0C000040		jal	simplify
 104 0088               
 105 0088 00408021		move	$s0, $v0	# save the numerator
 106 008c 00608821		move	$s1, $v1	# save the denominator
 107 0090 03209021		move	$s2, $t9	# save the integer part
 108 0094               	
 109 0094 3C040000	        la      $a0, res_string
     0098 34840000
 110 009c 0C000095		jal	print_string
 111 00a0               
 112 00a0 02402021		move	$a0, $s2
 113 00a4 34020001		li	$v0, PRINT_INT
 114 00a8 0000000C		syscall
 115 00ac               
 116 00ac 3C040000	        la      $a0, and_string
     00b0 34840000
 117 00b4 0C000095		jal	print_string
 118 00b8               
 119 00b8 02002021	        move    $a0, $s0
 120 00bc 34020001		li	$v0, PRINT_INT
 121 00c0 0000000C		syscall
 122 00c4               
 123 00c4 3C040000	        la      $a0, div_string
     00c8 34840000
 124 00cc 0C000095		jal	print_string
 125 00d0               
 126 00d0 02202021	        move    $a0, $s1
 127 00d4 34020001		li	$v0, PRINT_INT
 128 00d8 0000000C		syscall
 129 00dc               
 130 00dc 3C040000	        la      $a0, newline
     00e0 34840000
 131 00e4 0C000095		jal	print_string
 132 00e8               
 133 00e8                       #
 134 00e8                       # Now exit the program.
 135 00e8               	#
 136 00e8 8FBF000C	        lw      $ra, 12($sp)	# clean up stack
 137 00ec 8FB20008	        lw      $s2, 8($sp)
 138 00f0 8FB10004	        lw      $s1, 4($sp)
 139 00f4 8FB00000	        lw      $s0, 0($sp)
 140 00f8 23BD0010	        addi    $sp, $sp, 16
 141 00fc 03E00008	        jr      $ra
 142 0100               
 143 0100               #
 144 0100               # Name:		simplify 
 145 0100               #
 146 0100               # Description:	Simplify a fraction.
 147 0100               #
 148 0100               # Arguments:	a0:	the original numerator
 149 0100               #		a1:	the original denominator
 150 0100               # Returns:	v0:	the simplified numerator
 151 0100               #		v1:	the simplified denominator
 152 0100               #		t9:	the simplified integer part
 153 0100               #
 154 0100               #######################################################################
 155 0100               # 		NOTE: 	this function uses a non-standard return register
 156 0100               #			t9 will contain the integer part of the
 157 0100               #			simplified fraction
 158 0100               #######################################################################
 159 0100               #
 160 0100               #
 161 0100               
 162 0100               simplify:
 163 0100 23BDFFD8	        addi    $sp, $sp, -40	# allocate stack frame (on doubleword boundary)
 164 0104 AFBF0020	        sw      $ra, 32($sp)    # store the ra & s reg's on the stack
 165 0108 AFB7001C	        sw      $s7, 28($sp)
 166 010c AFB60018	        sw      $s6, 24($sp)
 167 0110 AFB50014	        sw      $s5, 20($sp)
 168 0114 AFB40010	        sw      $s4, 16($sp)
 169 0118 AFB3000C	        sw      $s3, 12($sp)    
 170 011c AFB20008	        sw      $s2, 8($sp)     
 171 0120 AFB10004	        sw      $s1, 4($sp)     
 172 0124 AFB00000	        sw      $s0, 0($sp)     
 173 0128               	
 174 0128               # ######################################
 175 0128               # ##### BEGIN STUDENT CODE BLOCK 1 #####
 176 0128 34100000	        li      $s0, 0          #Integer Value
 177 012c 24910000	        la      $s1, 0($a0)     #Numerator
 178 0130 24B20000	        la      $s2, 0($a1)     #Denominator
 179 0134               
 180 0134 0251402A	        slt     $t0, $s2, $s1
 181 0138 11000005	        beq     $t0, $zero, simplify_end_loop
 182 013c               simplify_begin_loop:
 183 013c 0011402A	        slt     $t0, $zero, $s1
 184 0140 11000003	        beq     $t0, $zero, simplify_end_loop
 185 0144 22100001	        addi    $s0, 1
 186 0148 02328822	        sub     $s1, $s1, $s2
 187 014c 0800004F	        j       simplify_begin_loop
 188 0150               simplify_end_loop:
 189 0150               
 190 0150 26240000	        la      $a0, 0($s1)
 191 0154 26450000	        la      $a1, 0($s2)
 192 0158 0C000069	        jal     find_gcd
 193 015c               
 194 015c                                               #Simplify the fraction using gcd found in
 195 015c 0222001A	        div     $s1, $v0
 196 0160 00008812	        mflo    $s1
 197 0164 0242001A	        div     $s2, $v0
 198 0168 00009012	        mflo    $s2
 199 016c               
 200 016c 26190000	        la      $t9, 0($s0)
 201 0170 26220000	        la      $v0, 0($s1)
 202 0174 26430000	        la      $v1, 0($s2)
 203 0178               # ###### END STUDENT CODE BLOCK 1 ######
 204 0178               # ######################################
 205 0178               
 206 0178               simplify_done:
 207 0178 8FBF0020	        lw      $ra, 32($sp)    # restore the ra & s reg's from the stack
 208 017c 8FB7001C	        lw      $s7, 28($sp)
 209 0180 8FB60018	        lw      $s6, 24($sp)
 210 0184 8FB50014	        lw      $s5, 20($sp)
 211 0188 8FB40010	        lw      $s4, 16($sp)
 212 018c 8FB3000C	        lw      $s3, 12($sp)
 213 0190 8FB20008	        lw      $s2, 8($sp)
 214 0194 8FB10004	        lw      $s1, 4($sp)
 215 0198 8FB00000	        lw      $s0, 0($sp)
 216 019c 23BD0028	        addi    $sp, $sp, 40      # clean up stack
 217 01a0 03E00008		jr	$ra
 218 01a4               
 219 01a4               #
 220 01a4               # Name:		find_gcd 
 221 01a4               #
 222 01a4               # Description:	computes the GCD of the two inputed numbers
 223 01a4               # Arguments:  	a0	The first number
 224 01a4               #		a1	The second number
 225 01a4               # Returns: 	v0	The GCD of a0 and a1.
 226 01a4               #
 227 01a4               
 228 01a4               find_gcd:
 229 01a4 23BDFFD8	        addi	$sp, $sp, -40	# allocate stackframe (doubleword aligned)
 230 01a8 AFBF0020	        sw      $ra, 32($sp)    # store the ra & s reg's on the stack
 231 01ac AFB7001C	        sw      $s7, 28($sp)
 232 01b0 AFB60018	        sw      $s6, 24($sp)
 233 01b4 AFB50014	        sw      $s5, 20($sp)
 234 01b8 AFB40010	        sw      $s4, 16($sp)
 235 01bc AFB3000C	        sw      $s3, 12($sp)
 236 01c0 AFB20008	        sw      $s2, 8($sp)
 237 01c4 AFB10004	        sw      $s1, 4($sp)
 238 01c8 AFB00000	        sw      $s0, 0($sp)
 239 01cc               
 240 01cc               # ######################################
 241 01cc               # ##### BEGIN STUDENT CODE BLOCK 2 #####
 242 01cc               
 243 01cc 24910000	        la      $s1, 0($a0)     #Numerator
 244 01d0 24B20000	        la      $s2, 0($a1)     #Denominator
 245 01d4 34130000	        li      $s3, 0
 247 01dc               gcd_begin_loop:
 248 01dc 1232000A	        beq     $s1, $s2, gcd_end_loop
 249 01e0               
 250 01e0 02329822	        sub     $s3, $s1, $s2
 251 01e4 0260402A	        slt     $t0, $s3, $zero
 252 01e8               
 253 01e8 11000001	        beq     $t0, $zero, gcd_non_neg
 254 01ec 00139822	        sub     $s3, $zero, $s3
 255 01f0               gcd_non_neg:
 256 01f0               
 257 01f0 0251402A	        slt     $t0, $s2, $s1
 258 01f4 11000002	        beq     $t0, $zero, gcd_denom_more
 259 01f8               
 260 01f8               gcd_denom_less:
 261 01f8 26710000	        la      $s1, 0($s3)
 262 01fc 08000077	        j    gcd_begin_loop
 263 0200               gcd_denom_more:
 264 0200 26720000	        la      $s2, 0($s3)
 265 0204 08000077	        j    gcd_begin_loop
 266 0208               gcd_end_loop:
 267 0208               
 268 0208 26220000	        la      $v0, 0($s1)
 269 020c               # ###### END STUDENT CODE BLOCK 2 ######
 270 020c               # ######################################
 271 020c               
 272 020c               find_gcd_done:
 273 020c 8FBF0020	        lw      $ra, 32($sp)    # restore the ra & s reg's from the stack
 274 0210 8FB7001C	        lw      $s7, 28($sp)
 275 0214 8FB60018	        lw      $s6, 24($sp)
 276 0218 8FB50014	        lw      $s5, 20($sp)
 277 021c 8FB40010	        lw      $s4, 16($sp)
 278 0220 8FB3000C	        lw      $s3, 12($sp)
 279 0224 8FB20008	        lw      $s2, 8($sp)
 280 0228 8FB10004	        lw      $s1, 4($sp)
 281 022c 8FB00000	        lw      $s0, 0($sp)
 282 0230 23BD0028	        addi    $sp, $sp, 40      # clean up the stack
 283 0234 03E00008		jr	$ra
 284 0238               
 285 0238               #
 286 0238               # Name;		print_number 
 287 0238               #
 288 0238               # Description:	This routine reads a number then a newline to stdout
 289 0238               # Arguments:	a0:  the number to print
 290 0238               # Returns:	nothing
 291 0238               #
 292 0238               print_number:
 293 0238               
 294 0238 34020001	        li 	$v0, PRINT_INT
 295 023c 0000000C	        syscall			#print a0
 296 0240               
 297 0240 3C040000	        la	$a0, newline
     0244 34840000
 298 0248 34020004	        li      $v0, PRINT_STRING
 299 024c 0000000C	        syscall			#print a newline
 300 0250               
 301 0250 03E00008	        jr      $ra
 302 0254               
 303 0254               #
 304 0254               # Name;		print_string 
 305 0254               #
 306 0254               # Description:	This routine prints out a string pointed to by a0
 307 0254               # Arguments:	a0:  a pointer to the string to print
 308 0254               # Returns:	nothing
 309 0254               #
 310 0254               print_string:
 311 0254               
 312 0254 34020004	        li 	$v0, PRINT_STRING
 313 0258 0000000C	        syscall			#print a0
 314 025c               
 315 025c 03E00008	        jr      $ra


PRINT_INT            = 00000001   
PRINT_STRING         = 00000004   
READ_INT             = 00000005   
and_string             000000E9 R  data 
ask_for_den            00000050 R  text 
ask_for_num            00000020 R  text 
den_good               00000080 R  text 
den_string             000000A2 R  data 
div_string             000000EF R  data 
find_gcd               000001A4 R  text 
find_gcd_done          0000020C R  text 
gcd_begin_loop         000001DC R  text 
gcd_denom_less         000001F8 R  text 
gcd_denom_more         00000200 R  text 
gcd_end_loop           00000208 R  text 
gcd_non_neg            000001F0 R  text 
input_error            00000053 R  data 
into_msg               00000000 R  data 
main                   00000000 RG text 
newline                00000051 R  data 
num_string             0000007B R  data 
print_number           00000238 R  text 
print_string           00000254 R  text 
res_string             000000CB R  data 
simplify               00000100 R  text 
simplify_begin_loop    0000013C R  text 
simplify_done          00000178 R  text 
simplify_end_loop      00000150 R  text 
